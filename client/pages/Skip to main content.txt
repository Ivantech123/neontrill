Skip to main content
[Concepts](https://docs.ton.org/v3/concepts/dive-into-ton/introduction)
- [Introduction](https://docs.ton.org/v3/concepts/dive-into-ton/introduction)
- [Wallets](https://docs.ton.org/v3/concepts/dive-into-ton/ton-ecosystem/wallet-apps)
- [Explorers](https://docs.ton.org/v3/concepts/dive-into-ton/ton-ecosystem/explorers-in-ton)
- [Blockchain](https://docs.ton.org/v3/concepts/dive-into-ton/ton-blockchain/blockchain-of-blockchains)
[Introduction](https://docs.ton.org/v3/concepts/dive-into-ton/introduction)
[Wallets](https://docs.ton.org/v3/concepts/dive-into-ton/ton-ecosystem/wallet-apps)
[Explorers](https://docs.ton.org/v3/concepts/dive-into-ton/ton-ecosystem/explorers-in-ton)
[Blockchain](https://docs.ton.org/v3/concepts/dive-into-ton/ton-blockchain/blockchain-of-blockchains)
[Guidelines](https://docs.ton.org/v3/guidelines/quick-start/getting-started)
- [Quick Start](https://docs.ton.org/v3/guidelines/quick-start/getting-started)
- [Smart Contracts](https://docs.ton.org/v3/guidelines/smart-contracts/guidelines)
- [DApps](https://docs.ton.org/v3/guidelines/dapps/overview)
- [Nodes](https://docs.ton.org/v3/guidelines/nodes/overview)
- [Integrate with TON](https://docs.ton.org/v3/guidelines/ton-connect/overview)
- [Web3](https://docs.ton.org/v3/guidelines/web3/overview)
[Quick Start](https://docs.ton.org/v3/guidelines/quick-start/getting-started)
[Smart Contracts](https://docs.ton.org/v3/guidelines/smart-contracts/guidelines)
[DApps](https://docs.ton.org/v3/guidelines/dapps/overview)
[Nodes](https://docs.ton.org/v3/guidelines/nodes/overview)
[Integrate with TON](https://docs.ton.org/v3/guidelines/ton-connect/overview)
[Web3](https://docs.ton.org/v3/guidelines/web3/overview)
[Documentation](https://docs.ton.org/v3/documentation/ton-documentation)
- [Smart Contracts](https://docs.ton.org/v3/documentation/smart-contracts/overview)
- [TON Virtual Machine (TVM)](https://docs.ton.org/v3/documentation/tvm/tvm-overview)
- [Nodes](https://docs.ton.org/v3/documentation/infra/nodes/node-types)
- [DApps](https://docs.ton.org/v3/documentation/dapps/dapps-overview)
- [Data Formats](https://docs.ton.org/v3/documentation/data-formats/tlb/cell-boc)
- [Networking](https://docs.ton.org/v3/documentation/network/protocols/adnl/low-level-adnl)
- [Whitepapers](https://docs.ton.org/v3/documentation/whitepapers/overview)
[Smart Contracts](https://docs.ton.org/v3/documentation/smart-contracts/overview)
[TON Virtual Machine (TVM)](https://docs.ton.org/v3/documentation/tvm/tvm-overview)
[Nodes](https://docs.ton.org/v3/documentation/infra/nodes/node-types)
[DApps](https://docs.ton.org/v3/documentation/dapps/dapps-overview)
[Data Formats](https://docs.ton.org/v3/documentation/data-formats/tlb/cell-boc)
[Networking](https://docs.ton.org/v3/documentation/network/protocols/adnl/low-level-adnl)
[Whitepapers](https://docs.ton.org/v3/documentation/whitepapers/overview)
English
- [English](https://docs.ton.org/v3/guidelines/dapps/tutorials/web3-game-example)
- [简体中文](https://docs.ton.org/mandarin/v3/guidelines/dapps/tutorials/web3-game-example)
- [Русский](https://docs.ton.org/ru/v3/guidelines/dapps/tutorials/web3-game-example)
- 
- [Help Us Translate](https://docs.ton.org/v3/contribute/localization-program/overview)
[English](https://docs.ton.org/v3/guidelines/dapps/tutorials/web3-game-example)
[简体中文](https://docs.ton.org/mandarin/v3/guidelines/dapps/tutorials/web3-game-example)
[Русский](https://docs.ton.org/ru/v3/guidelines/dapps/tutorials/web3-game-example)
[Help Us Translate](https://docs.ton.org/v3/contribute/localization-program/overview)
- [Quick start](https://docs.ton.org/v3/guidelines/quick-start/getting-started)
- [Get started with TON](https://docs.ton.org/v3/guidelines/get-started-with-ton)
- [TON Hello World series](https://docs.ton.org/guidelines/hello-world)
- [Smart contracts guidelines](https://docs.ton.org/guidelines/smat-contracts-guidelines)
- DApps guidelinesGetting startedTON cookbookMastering transactionsAPIs and SDKsTutorials & examplesHow to launch a jetton airdropHow to retrieve a TON Center API keyHTTP API by GetBlockNFT minting guideMint your first tokenZero-Knowledge proofsWeb3 game exampleTelegram bot examplesTelegram Mini Apps[Advanced asset processing](https://docs.ton.org/guidelines/advanced-asset-processing)
- [Getting started](https://docs.ton.org/v3/guidelines/dapps/overview)
- [TON cookbook](https://docs.ton.org/v3/guidelines/dapps/cookbook)

- [Mastering transactions](https://docs.ton.org/v3/guidelines/dapps/transactions/overview)
- [APIs and SDKs](https://docs.ton.org/guidelines/api-sdk)
- Tutorials & examplesHow to launch a jetton airdropHow to retrieve a TON Center API keyHTTP API by GetBlockNFT minting guideMint your first tokenZero-Knowledge proofsWeb3 game example[Telegram bot examples](https://docs.ton.org/guidelines/tg-bot-examples)
- [How to launch a jetton airdrop](https://docs.ton.org/v3/guidelines/dapps/tutorials/jetton-airdrop)
- [How to retrieve a TON Center API key](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/api-keys)
- [HTTP API by GetBlock](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/getblock-ton-api)
- [NFT minting guide](https://docs.ton.org/v3/guidelines/dapps/tutorials/nft-minting-guide)
- [Mint your first token](https://docs.ton.org/v3/guidelines/dapps/tutorials/mint-your-first-token)
- [Zero-Knowledge proofs](https://docs.ton.org/v3/guidelines/dapps/tutorials/zero-knowledge-proofs)
- [Web3 game example](https://docs.ton.org/v3/guidelines/dapps/tutorials/web3-game-example)
- [Telegram bot examples](https://docs.ton.org/guidelines/tg-bot-examples)
- [Telegram Mini Apps](https://docs.ton.org/guidelines/tma)
- [Advanced asset processing](https://docs.ton.org/guidelines/advanced-asset-processing)
- [Blockchain nodes guidelines](https://docs.ton.org/guidelines/nodes-guidelines)
- [Integrate with TON](https://docs.ton.org/guidelines/integrate-with-ton)
- [Web3 guidelines](https://docs.ton.org/guidelines/web3-guidelines)
[Quick start](https://docs.ton.org/v3/guidelines/quick-start/getting-started)
[Get started with TON](https://docs.ton.org/v3/guidelines/get-started-with-ton)
[TON Hello World series](https://docs.ton.org/guidelines/hello-world)
[Smart contracts guidelines](https://docs.ton.org/guidelines/smat-contracts-guidelines)
[DApps guidelines](https://docs.ton.org/guidelines/dapps)
- [Getting started](https://docs.ton.org/v3/guidelines/dapps/overview)
- [TON cookbook](https://docs.ton.org/v3/guidelines/dapps/cookbook)
- [Mastering transactions](https://docs.ton.org/v3/guidelines/dapps/transactions/overview)
- [APIs and SDKs](https://docs.ton.org/guidelines/api-sdk)
- Tutorials & examplesHow to launch a jetton airdropHow to retrieve a TON Center API keyHTTP API by GetBlockNFT minting guideMint your first tokenZero-Knowledge proofsWeb3 game example[Telegram bot examples](https://docs.ton.org/guidelines/tg-bot-examples)
- [How to launch a jetton airdrop](https://docs.ton.org/v3/guidelines/dapps/tutorials/jetton-airdrop)
- [How to retrieve a TON Center API key](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/api-keys)
- [HTTP API by GetBlock](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/getblock-ton-api)
- [NFT minting guide](https://docs.ton.org/v3/guidelines/dapps/tutorials/nft-minting-guide)
- [Mint your first token](https://docs.ton.org/v3/guidelines/dapps/tutorials/mint-your-first-token)
- [Zero-Knowledge proofs](https://docs.ton.org/v3/guidelines/dapps/tutorials/zero-knowledge-proofs)
- [Web3 game example](https://docs.ton.org/v3/guidelines/dapps/tutorials/web3-game-example)
- [Telegram bot examples](https://docs.ton.org/guidelines/tg-bot-examples)
- [Telegram Mini Apps](https://docs.ton.org/guidelines/tma)
- [Advanced asset processing](https://docs.ton.org/guidelines/advanced-asset-processing)
[Getting started](https://docs.ton.org/v3/guidelines/dapps/overview)
[TON cookbook](https://docs.ton.org/v3/guidelines/dapps/cookbook)
[Mastering transactions](https://docs.ton.org/v3/guidelines/dapps/transactions/overview)
[APIs and SDKs](https://docs.ton.org/guidelines/api-sdk)
[Tutorials & examples](https://docs.ton.org/guidelines/tutorials-and-examples)
- [How to launch a jetton airdrop](https://docs.ton.org/v3/guidelines/dapps/tutorials/jetton-airdrop)
- [How to retrieve a TON Center API key](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/api-keys)
- [HTTP API by GetBlock](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/getblock-ton-api)
- [NFT minting guide](https://docs.ton.org/v3/guidelines/dapps/tutorials/nft-minting-guide)
- [Mint your first token](https://docs.ton.org/v3/guidelines/dapps/tutorials/mint-your-first-token)
- [Zero-Knowledge proofs](https://docs.ton.org/v3/guidelines/dapps/tutorials/zero-knowledge-proofs)
- [Web3 game example](https://docs.ton.org/v3/guidelines/dapps/tutorials/web3-game-example)
- [Telegram bot examples](https://docs.ton.org/guidelines/tg-bot-examples)

[How to launch a jetton airdrop](https://docs.ton.org/v3/guidelines/dapps/tutorials/jetton-airdrop)
[How to retrieve a TON Center API key](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/api-keys)
[HTTP API by GetBlock](https://docs.ton.org/v3/guidelines/dapps/apis-sdks/getblock-ton-api)
[NFT minting guide](https://docs.ton.org/v3/guidelines/dapps/tutorials/nft-minting-guide)
[Mint your first token](https://docs.ton.org/v3/guidelines/dapps/tutorials/mint-your-first-token)
[Zero-Knowledge proofs](https://docs.ton.org/v3/guidelines/dapps/tutorials/zero-knowledge-proofs)
[Web3 game example](https://docs.ton.org/v3/guidelines/dapps/tutorials/web3-game-example)
[Telegram bot examples](https://docs.ton.org/guidelines/tg-bot-examples)
[Telegram Mini Apps](https://docs.ton.org/guidelines/tma)
[Advanced asset processing](https://docs.ton.org/guidelines/advanced-asset-processing)
[Blockchain nodes guidelines](https://docs.ton.org/guidelines/nodes-guidelines)
[Integrate with TON](https://docs.ton.org/guidelines/integrate-with-ton)
[Web3 guidelines](https://docs.ton.org/guidelines/web3-guidelines)

## What’s in the tutorial​
​
In this tutorial, we will explore how to integrate TON Blockchain into a game. As an example, we will use a Flappy Bird clone built with Phaser and gradually add GameFi features. To improve readability, we will use short code snippets and pseudocode. Additionally, we will provide links to real code blocks for better understanding. The complete implementation can be found in the [demo repo](https://github.com/ton-community/flappy-bird).
We will implement the following:
- Achievements. Let’s reward our users with [SBTs](https://docs.ton.org/v3/concepts/glossary). The achievement system is a great tool for increasing user engagement.
- Game currency. On the TON blockchain, it’s easy to launch your own token (jetton). The token can be used to create an in-game economy. Our users will be able to earn game coins and spend them later.
- Game shop. We will allow users to purchase in-game items using either in-game currency or TON coins.
[SBTs](https://docs.ton.org/v3/concepts/glossary)

## Preparations​
​

### Install GameFi SDK​
​
First, we need to set up the game environment by installing assets-sdk. This package is designed to provide developers with everything required to integrate blockchain into games. The library can be used either from the CLI or within Node.js scripts. In this tutorial, we will use the CLI approach.

```
assets-sdk
```


```
npm install -g @ton-community/assets-sdk@beta
```


```
npm install -g @ton-community/assets-sdk@beta
```

### Create a master wallet​
​
Next, we need to create a master wallet. This wallet will be used to mint jettons, collections, NFTs, and SBTs, as well as to receive payments.

```
assets-cli setup-env
```


```
assets-cli setup-env
```

You will be asked a few questions during the setup.

```
testnet
```


```
highload-v2
```


```
NFT
```


```
SB
```


```
Amazon S3
```


```
Pinata
```


```
pinata
```

The script will output a link where you can view the created wallet's state.
As you can see, the wallet has not actually been created yet. To finalize the creation, we need to deposit funds into it. In a real-world scenario, you can fund the wallet however you prefer using its address. In our case, we will use the [Testgiver TON Bot](https://t.me/testgiver_ton_bot). Open it to claim 5 test TON coins.
A little later, you should see 5 TON in the wallet, and its status will change to Uninit. The wallet is now ready. After the first transaction, its status will change to Active.

### Mint in-game currency​
​
We are going to create an in-game currency to reward users.

```
assets-cli deploy-jetton
```


```
assets-cli deploy-jetton
```

You will be asked a few questions during the setup:

```
Flappy Jetton
```

[jetton logo](https://raw.githubusercontent.com/ton-community/flappy-bird/ca4b6335879312a9b94f0e89384b04cea91246b1/scripts/tokens/flap/image.png)

```
FLAP
```


```
0
```

The script will output a link where you can view the created jetton's state. It will have an Active status. The wallet’s status will change from Uninit to Active.

### Create collections for SBTs​
​
For our demo game, we will reward users after their first and fifth games. To do this, we will mint two collections, where SBTs will be assigned when users meet the required conditions—playing for the first and fifth time:

```
assets-cli deploy-nft-collection
```


```
assets-cli deploy-nft-collection
```


```
sbt
```


```
sbt
```

[the image](https://raw.githubusercontent.com/ton-community/flappy-bird/article-v1/scripts/tokens/first-time/image.png)
[the image](https://raw.githubusercontent.com/ton-community/flappy-bird/article-v1/scripts/tokens/five-times/image.png)
Now that we are fully prepared, let's proceed to implementing the game logic.

## Connecting wallet​

​
The process begins with the user connecting their wallet. Let's integrate wallet connectivity.
To interact with the blockchain from the client side, we need to install the GameFi SDK for Phaser:

```
npm install --save @ton/phaser-sdk@beta
```


```
npm install --save @ton/phaser-sdk@beta
```

Now, let's set up GameFi SDK and create an instance of it:

```
import { GameFi } from '@ton/phaser-sdk'const gameFi = await GameFi.create({ network: 'testnet' connector: { // if tonconnect-manifest.json is placed in the root you can skip this option manifestUrl: '/assets/tonconnect-manifest.json', actionsConfiguration: { // address of your Telegram Mini App to return to after the wallet is connected // url you provided to BothFather during the app creation process // to read more please read https://github.com/ton-community/flappy-bird#telegram-bot--telegram-web-app twaReturnUrl: URL_YOU_ASSIGNED_TO_YOUR_APP }, contentResolver: { // some NFT marketplaces don't support CORS, so we need to use a proxy // you are able to use any format of the URL, %URL% will be replaced with the actual URL urlProxy: `${YOUR_BACKEND_URL}/${PROXY_URL}?url=%URL%` }, // where in-game purchases come to merchant: { // in-game jetton purchases (FLAP) // use address you got running `assets-cli deploy-jetton` jettonAddress: FLAP_ADDRESS, // in-game TON purchases // use master wallet address you got running `assets-cli setup-env` tonAddress: MASTER_WALLET_ADDRESS } },})
```


```
import { GameFi } from '@ton/phaser-sdk'const gameFi = await GameFi.create({ network: 'testnet' connector: { // if tonconnect-manifest.json is placed in the root you can skip this option manifestUrl: '/assets/tonconnect-manifest.json', actionsConfiguration: { // address of your Telegram Mini App to return to after the wallet is connected // url you provided to BothFather during the app creation process // to read more please read https://github.com/ton-community/flappy-bird#telegram-bot--telegram-web-app twaReturnUrl: URL_YOU_ASSIGNED_TO_YOUR_APP }, contentResolver: { // some NFT marketplaces don't support CORS, so we need to use a proxy // you are able to use any format of the URL, %URL% will be replaced with the actual URL urlProxy: `${YOUR_BACKEND_URL}/${PROXY_URL}?url=%URL%` }, // where in-game purchases come to merchant: { // in-game jetton purchases (FLAP) // use address you got running `assets-cli deploy-jetton` jettonAddress: FLAP_ADDRESS, // in-game TON purchases // use master wallet address you got running `assets-cli setup-env` tonAddress: MASTER_WALLET_ADDRESS } },})
```

To learn more about initialization options please read the [library documentation](https://github.com/ton-org/game-engines-sdk).
To learn what tonconnect-manifest.json is please check ton-connect [manifest description](https://docs.ton.org/v3/guidelines/ton-connect/guidelines/creating-manifest).

```
tonconnect-manifest.json
```

Next, we are ready to create a Wallet Connect button. Let’s create a UI scene in Phaser that will contain the Connect button:

```
class UiScene extends Phaser.Scene { // receive gameFi instance via constructor private gameFi: GameFi; create() { this.button = this.gameFi.createConnectButton({ scene: this, // you can calculate the position for the button in your UI scene x: 0, y: 0, button: { onError: (error) => { console.error(error) } // other options, read the docs } }) }}
```


```
class UiScene extends Phaser.Scene { // receive gameFi instance via constructor private gameFi: GameFi; create() { this.button = this.gameFi.createConnectButton({ scene: this, // you can calculate the position for the button in your UI scene x: 0, y: 0, button: { onError: (error) => { console.error(error) } // other options, read the docs } }) }}
```

Read how to create connect button and the [UI scene](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/client/src/connect-wallet-ui.ts).
To monitor when a user connects or disconnects their wallet, use the following code snippet:

```
function onWalletChange(wallet: Wallet | null) { if (wallet) { // wallet is ready to use } else { // wallet is disconnected }}const unsubscribe = gameFi.onWalletChange(onWalletChange)
```


```
function onWalletChange(wallet: Wallet | null) { if (wallet) { // wallet is ready to use } else { // wallet is disconnected }}const unsubscribe = gameFi.onWalletChange(onWalletChange)
```

## Connecting wallet​
To learn about more complex scenarios please check out the full implementation of [wallet connect flow](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/client/src/index.ts).
Read how [game UI managing](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/client/src/index.ts) can be implemented.
Now that we have the user's wallet connected, we can move forward.

## Implementing achievements & rewards​
​
To implement the achievements and reward system, we need to set up an endpoint that will be triggered each time a user plays.

### /played endpoint​
```
/played
```

​
We need to create an endpoint /played which does the following:

```
/played
```

- receives a request body containing the user’s wallet address and Telegram initial data, which is passed to the Mini App during launch. The initial data must be parsed to extract authentication details and verify that the user is sending the request on their own behalf.
- tracks and stores the number of games a user has played.
- checks whether this is the user’s first or fifth game. If so, it rewards the user with the corresponding SBT.
- rewards the user with 1 FLAP for each game played.
Read [/played endpoint](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/server/src/index.ts) code.

### Request /played endpoint​
```
/played
```

​
Every time the bird hits a pipe or falls, the client code must call the /played endpoint, passing the correct request body:

```
/played
```


```
async function submitPlayed(endpoint: string, walletAddress: string) { return await (await fetch(endpoint + '/played', { body: JSON.stringify({ tg_data: (window as any).Telegram.WebApp.initData, wallet: walletAddress }), headers: { 'content-type': 'application/json' }, method: 'POST' })).json()}const playedInfo = await submitPlayed('http://localhost:3001', wallet.account.address);
```


```
async function submitPlayed(endpoint: string, walletAddress: string) { return await (await fetch(endpoint + '/played', { body: JSON.stringify({ tg_data: (window as any).Telegram.WebApp.initData, wallet: walletAddress }), headers: { 'content-type': 'application/json' }, method: 'POST' })).json()}const playedInfo = await submitPlayed('http://localhost:3001', wallet.account.address);
```

Read [submitPlayer function](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/client/src/game-scene.ts) code.
Let’s play for the first time and ensure we receive a FLAP token and an SBT. Click the Play button, fly through a pipe or two, then crash into a pipe. Everything works!
Play four more times to earn the second SBT, then open your TON Space Wallet. Here are your collectibles:

## Implementing the game shop​

​
To set up an in-game shop, we need two components. The first is an endpoint that provides information about users' purchases. The second is a global loop that monitors user transactions and assigns game properties to item owners.

### /purchases endpoint​
```
/purchases
```

​
The endpoint does the following:
- receive auth query parameter containing Telegram Mini App initial data.
- retrieves the items a user has purchased and responds with a list of those items.

```
auth
```

Read [/purchases](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/server/src/index.ts) endpoint code.

### Purchases loop​
​
o track user payments, we need to monitor transactions in the master wallet. Each transaction must include a message in the format userId:itemId. We will store the last processed transaction, retrieve only new ones, assign purchased properties to users based on userId and itemId, and update the last transaction hash. This process will run in an infinite loop.

```
userId
```


```
itemId
```


```
userId
```


```
itemId
```

Read the [purchase loop](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/server/src/index.ts) code.

### Client side for the shop​
​
On the client side, we have a Shop button.
When a user clicks this button, the Shop Scene opens. The shop contains a list of items available for purchase. Each item has a price and a Buy button. When a user clicks the Buy button, the purchase is processed.
Opening the Shop Scene will trigger the loading of purchased items and refresh the list every 10 seconds.

```
// inside of fetchPurchases functionawait fetch('http://localhost:3000/purchases?auth=' + encodeURIComponent((window as any).Telegram.WebApp.initData))// watch for purchasessetTimeout(() => { fetchPurchases() }, 10000)
```


```
// inside of fetchPurchases functionawait fetch('http://localhost:3000/purchases?auth=' + encodeURIComponent((window as any).Telegram.WebApp.initData))// watch for purchasessetTimeout(() => { fetchPurchases() }, 10000)
```

Read [showShop function](https://github.com/ton-community/flappy-bird/blob/article-v1/workspaces/client/src/ui.ts) code.
Now, we need to implement the purchase process. To do this, we will first create a GameFi SDK instance and then use the buyWithJetton method:

```
buyWithJetton
```


```
gameFi.buyWithJetton({ amount: BigInt(price), forwardAmount: BigInt(1), forwardPayload: (window as any).Telegram.WebApp.initDataUnsafe.user.id + ':' + itemId});
```


```
gameFi.buyWithJetton({ amount: BigInt(price), forwardAmount: BigInt(1), forwardPayload: (window as any).Telegram.WebApp.initDataUnsafe.user.id + ':' + itemId});
```

It is also possible to pay with TON coins:

```
import { toNano } from '@ton/phaser-sdk'gameFi.buyWithTon({ amount: toNano(0.5), comment: (window as any).Telegram.WebApp.initDataUnsafe.user.id + ':' + 1});
```


```
import { toNano } from '@ton/phaser-sdk'gameFi.buyWithTon({ amount: toNano(0.5), comment: (window as any).Telegram.WebApp.initDataUnsafe.user.id + ':' + 1});
```

## Afterword​

​
That’s it for this tutorial! We explored the basic GameFi features, but the SDK offers additional functionality, such as player-to-player transfers and utilities for working with NFTs and collections. More features will be introduced in the future.
To learn about all available GameFi features, read the documentation for ton-org/game-engines-sdk and [@ton-community/assets-sdk](https://github.com/ton-community/assets-sdk).
Let us know your thoughts in [Discussions](https://github.com/ton-org/game-engines-sdk/discussions)!
The complete implementation is available in the [flappy-bird](https://github.com/ton-community/flappy-bird) repository.
[Edit this page](https://github.com/ton-community/ton-docs/tree/main/docs/v3/guidelines/dapps/tutorials/web3-game-example.mdx)
[PreviousZero-Knowledge proofs](https://docs.ton.org/v3/guidelines/dapps/tutorials/zero-knowledge-proofs)
[NextTelegram bot examples](https://docs.ton.org/guidelines/tg-bot-examples)
- What’s in the tutorial
- PreparationsInstall GameFi SDKCreate a master walletMint in-game currencyCreate collections for SBTs
- Install GameFi SDK
- Create a master wallet
- Mint in-game currency
- Create collections for SBTs
- Connecting wallet
- Implementing achievements & rewards/played endpointRequest /played endpoint
- /played endpoint
- Request /played endpoint
- Implementing the game shop/purchases endpointPurchases loopClient side for the shop
- /purchases endpoint
- Purchases loop
- Client side for the shop
- Afterword
What’s in the tutorial
Preparations
- Install GameFi SDK
- Create a master wallet
- Mint in-game currency
- Create collections for SBTs
Install GameFi SDK
Create a master wallet
Mint in-game currency
Create collections for SBTs
Connecting wallet
Implementing achievements & rewards
- /played endpoint
- Request /played endpoint
/played endpoint

```
/played
```

Request /played endpoint

```
/played
```

Implementing the game shop
- /purchases endpoint
- Purchases loop
- Client side for the shop
/purchases endpoint

```
/purchases
```

Purchases loop
Client side for the shop
Afterword
[Get a wallet](https://ton.org/wallets)
[Get or sell Toncoin](https://ton.org/buy-toncoin)
[Stake](https://ton.org/stake)
[Accept Payments](https://ton.org/payments)
[Apps & Services](https://t.me/tapps_bot/center?startApp=section_web3-tonorgtma)
[Bridge](https://bridge.ton.org)
[Domains](https://dns.ton.org/)
[The Open League](https://ton.org/open-league)
[USDT on TON](https://ton.org/borderless)
[TON Concept](https://docs.ton.org/v3/guidelines/dapps/tutorials/v3/concepts/dive-into-ton/introduction)
[Decentralized Network](https://ton.org/decentralized-network)
[Roadmap](https://ton.org/roadmap)
[TonStat](https://www.tonstat.com/)
[History of mining](https://ton.org/mining)
[Toncoin](https://ton.org/toncoin)
[Validators](https://ton.org/validator)
[Blockchain comparison](https://ton.org/comparison_of_blockchains.pdf)
[White paper](https://ton.org/whitepaper.pdf)
[Getting started](https://ton.org/dev)
[Documentation](https://docs.ton.org/)
[TON Overflow](https://tonresear.ch)
[Dev Community](https://t.me/tondev_eng)
[Grants](https://ton.org/grants)
[Liquidity Program](https://ton.org/defi-liquidity-program)
[TON Footsteps](https://github.com/ton-society/ton-footsteps)
[Bug Bounty](https://github.com/ton-blockchain/bug-bounty)
[Communities](https://ton.org/community)
[TON Foundation](https://ton.foundation/)
[Events](https://ton.org/events)
[Collaborate](https://ton.org/collaborate)
[Blog](https://blog.ton.org)
[Press releases](https://blog.ton.org/category/news)
[Careers](https://jobs.ton.org/jobs)
[Support and Feedback](https://t.me/ton_help_bot)
[Brand assets](https://ton.org/brand-assets)
[Contact us](https://ton.org/contact-us)